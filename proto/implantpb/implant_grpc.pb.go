// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: implantpb/implant.proto

package implantpb

import (
	context "context"
	taskpb "github.com/devilsec/btedr/proto/taskpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImplantRPCClient is the client API for ImplantRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImplantRPCClient interface {
	// Retrieve a task from the server (beacon mode)
	GetTask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*taskpb.Task, error)
	TaskResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
}

type implantRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewImplantRPCClient(cc grpc.ClientConnInterface) ImplantRPCClient {
	return &implantRPCClient{cc}
}

func (c *implantRPCClient) GetTask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*taskpb.Task, error) {
	out := new(taskpb.Task)
	err := c.cc.Invoke(ctx, "/btedrpb.ImplantRPC/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *implantRPCClient) TaskResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/btedrpb.ImplantRPC/TaskResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImplantRPCServer is the server API for ImplantRPC service.
// All implementations must embed UnimplementedImplantRPCServer
// for forward compatibility
type ImplantRPCServer interface {
	// Retrieve a task from the server (beacon mode)
	GetTask(context.Context, *Request) (*taskpb.Task, error)
	TaskResult(context.Context, *Result) (*Empty, error)
	mustEmbedUnimplementedImplantRPCServer()
}

// UnimplementedImplantRPCServer must be embedded to have forward compatible implementations.
type UnimplementedImplantRPCServer struct {
}

func (UnimplementedImplantRPCServer) GetTask(context.Context, *Request) (*taskpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedImplantRPCServer) TaskResult(context.Context, *Result) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskResult not implemented")
}
func (UnimplementedImplantRPCServer) mustEmbedUnimplementedImplantRPCServer() {}

// UnsafeImplantRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImplantRPCServer will
// result in compilation errors.
type UnsafeImplantRPCServer interface {
	mustEmbedUnimplementedImplantRPCServer()
}

func RegisterImplantRPCServer(s grpc.ServiceRegistrar, srv ImplantRPCServer) {
	s.RegisterService(&ImplantRPC_ServiceDesc, srv)
}

func _ImplantRPC_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplantRPCServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btedrpb.ImplantRPC/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplantRPCServer).GetTask(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImplantRPC_TaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplantRPCServer).TaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btedrpb.ImplantRPC/TaskResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplantRPCServer).TaskResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

// ImplantRPC_ServiceDesc is the grpc.ServiceDesc for ImplantRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImplantRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btedrpb.ImplantRPC",
	HandlerType: (*ImplantRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _ImplantRPC_GetTask_Handler,
		},
		{
			MethodName: "TaskResult",
			Handler:    _ImplantRPC_TaskResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "implantpb/implant.proto",
}
