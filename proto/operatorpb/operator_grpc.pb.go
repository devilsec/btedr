// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: operatorpb/operator.proto

package operatorpb

import (
	context "context"
	taskpb "github.com/devilsec/btedr/proto/taskpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperatorRPCClient is the client API for OperatorRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorRPCClient interface {
	Ping(ctx context.Context, in *taskpb.PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*StartResp, error)
}

type operatorRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorRPCClient(cc grpc.ClientConnInterface) OperatorRPCClient {
	return &operatorRPCClient{cc}
}

func (c *operatorRPCClient) Ping(ctx context.Context, in *taskpb.PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/operatorpb.OperatorRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorRPCClient) Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*StartResp, error) {
	out := new(StartResp)
	err := c.cc.Invoke(ctx, "/operatorpb.OperatorRPC/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorRPCServer is the server API for OperatorRPC service.
// All implementations must embed UnimplementedOperatorRPCServer
// for forward compatibility
type OperatorRPCServer interface {
	Ping(context.Context, *taskpb.PingReq) (*PingResp, error)
	Start(context.Context, *StartReq) (*StartResp, error)
	mustEmbedUnimplementedOperatorRPCServer()
}

// UnimplementedOperatorRPCServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorRPCServer struct {
}

func (UnimplementedOperatorRPCServer) Ping(context.Context, *taskpb.PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedOperatorRPCServer) Start(context.Context, *StartReq) (*StartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedOperatorRPCServer) mustEmbedUnimplementedOperatorRPCServer() {}

// UnsafeOperatorRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorRPCServer will
// result in compilation errors.
type UnsafeOperatorRPCServer interface {
	mustEmbedUnimplementedOperatorRPCServer()
}

func RegisterOperatorRPCServer(s grpc.ServiceRegistrar, srv OperatorRPCServer) {
	s.RegisterService(&OperatorRPC_ServiceDesc, srv)
}

func _OperatorRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(taskpb.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operatorpb.OperatorRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorRPCServer).Ping(ctx, req.(*taskpb.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorRPC_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorRPCServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operatorpb.OperatorRPC/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorRPCServer).Start(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatorRPC_ServiceDesc is the grpc.ServiceDesc for OperatorRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operatorpb.OperatorRPC",
	HandlerType: (*OperatorRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _OperatorRPC_Ping_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _OperatorRPC_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operatorpb/operator.proto",
}
